#case 1,for f(x)=(x-5)**2

import numpy as np

def f(x):
    return (x-5)**2

def train_1d(num_iter,x1,x2):
    eta = np.random.rand()
    g_x =[x1,x2]
    
    for i in range(num_iter):
        action = np.sign(f(g_x[-1])-f(g_x[-2]))
        temp1 = g_x[-1] - eta*np.sign(g_x[-1]-g_x[-2])*action
        g_x.append(temp1)
    return np.array(g_x)

#case 2
def f(x1,x2):
    return 0.1*x1**2 + 20*x2**2

def train_2d(num_iter,x1,x2,x3,x4,eta=0.6):
    g_x =[x1,x2]
    g_y =[x3,x4]
    for i in range(num_iter):
        action = np.sign(f(g_x[-1],g_y[-1])-f(g_x[-2],g_y[-2]))
        temp1 = g_x[-1] - eta*np.sign(g_x[-1]-g_x[-2])*action
        temp2 = g_y[-1] - eta*np.sign(g_y[-1]-g_y[-2])*action
        g_x.append(temp1)
        g_y.append(temp2)
    return g_x,g_y

# Comparason with each algorithm
# Particle Search Optimization
import numpy as np
import time

plt.rcParams['font.sans-serif'] = ['SimHei']# 指定默认字体
plt.rcParams['axes.unicode_minus'] = False # 解决保存图像是负号'-'无法显示的问题
 
def fitness_func(x):
    # weierstrass f1
    return np.sum((x+0.5)**2,axis=-1)

    #Rastragin f2
    #dim = x.shape[-1]
    #y = 10*dim + np.sum(np.power(x,2)-10*np.cos(2*np.pi*x),axis=-1)
    #return y

    #Stablin_Tang f3
    #y = 0.5*np.sum(np.power(x,4)-16*np.power(x,2) + 5*x, axis=-1)
    #return y

     # Dixon-Price f4
     #n= x.shape[-1]
     #y = np.power(x[:,0],2)+ np.sum(np.array(range(2,n+1))*np.power(2*np.power(x[:,1:],2)-x[:,:-1],2),axis=-1)
     #return y

    # Rosenbrock f5
    #y = np.sum(100*np.power(x[:,1:]-np.power(x[:,:-1],2),2)+ np.power(x[:,:-1]-1,2),axis=-1)
    #return y

    # sphere f6
    #return np.sum(x**2,axis=-1)
